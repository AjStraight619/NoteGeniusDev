generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  username     String        @unique
  email        String        @unique
  password     String // consider storing a hash, not the plain text password
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  folders      Folder[]      @relation("FolderToUser")
  chats        Chat[]        @relation("ChatToUser")
  refinedNotes RefinedNote[]
}

model Chat {
  id        String        @id @default(uuid())
  title     String // The title of the chat
  content   String // The chat content
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String // Foreign key for the related user
  user      User          @relation("ChatToUser", fields: [userId], references: [id])
  messages  ChatMessage[]
}

model ChatMessage {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
}

model Note {
  id          String        @id @default(uuid())
  title       String
  content     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  folder      Folder?       @relation("FolderToNote", fields: [folderId], references: [id])
  folderId    String?
  RefinedNote RefinedNote[]
}

model Folder {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     Note[]   @relation("FolderToNote")
  userId    String // Foreign key for the related user
  user      User?    @relation("FolderToUser", fields: [userId], references: [id])
}

model RefinedNote {
  id           String   @id @default(uuid())
  originalNote String // The original text of the note
  refinedNote  String? // The refined text from ChatGPT
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  noteId       String // Foreign key for the related note
  note         Note     @relation(fields: [noteId], references: [id])
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?
}
